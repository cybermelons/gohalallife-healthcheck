#!/usr/bin/env node

import { program } from 'commander';
import { execSync } from 'child_process';
import { existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import chalk from 'chalk';
import ora from 'ora';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = dirname(__dirname);

// Check if running in the correct directory
function checkDirectory() {
  const upptimeConfig = join(projectRoot, '.upptimerc.yml');
  if (!existsSync(upptimeConfig)) {
    console.error(chalk.red('Error: .upptimerc.yml not found'));
    console.error(chalk.yellow('Make sure you are running this from the gohalallife-healthcheck directory'));
    process.exit(1);
  }
}

// Run an Upptime command
function runUpptime(command, description, useProductionConfig = false) {
  const spinner = ora(description).start();
  
  try {
    // Build the command
    let fullCommand = `cd ${projectRoot} && `;
    
    // Set environment variable for production config if needed
    if (useProductionConfig) {
      fullCommand += 'UPPTIME_RC=.upptimerc.prod.yml ';
    }
    
    // Add the Upptime command
    fullCommand += `node uptime-monitor/dist/index.js ${command}`;
    
    // Run the command
    const output = execSync(fullCommand, {
      encoding: 'utf8',
      stdio: ['inherit', 'pipe', 'pipe'],
      env: { ...process.env, GITHUB_TOKEN: process.env.GITHUB_TOKEN || '' }
    });
    
    spinner.succeed(`${description} - Complete`);
    
    if (output) {
      console.log(chalk.gray(output));
    }
    
    return true;
  } catch (error) {
    spinner.fail(`${description} - Failed`);
    console.error(chalk.red(error.message));
    if (error.stderr) {
      console.error(chalk.red(error.stderr.toString()));
    }
    return false;
  }
}

// Main CLI program
program
  .name('gohalallife-healthcheck')
  .description('CLI tool for checking GoHalalLife service health using Upptime')
  .version('2.0.0');

// Default command - check status
program
  .command('status', { isDefault: true })
  .description('Check health status of all configured endpoints')
  .option('-s, --summary', 'Generate summary after checking')
  .action((options) => {
    console.log(chalk.bold('\nüè• GoHalalLife Health Check\n'));
    
    checkDirectory();
    
    // For now, just display a message since Upptime needs more setup
    console.log(chalk.yellow('Note: Upptime monitor requires additional setup.'));
    console.log(chalk.yellow('For testing, you can use the original endpoints directly.\n'));
    
    // Run a simple check using curl for demonstration
    const endpoints = [
      { name: 'GoHalalLife Main Site', url: 'https://gohalallife.com' },
      { name: 'Status Worker (Production)', url: 'https://gohalallife-status-production.innovativesolutions109-089.workers.dev/status' },
      { name: 'Local Dev (if running)', url: 'http://localhost:8787' }
    ];
    
    for (const endpoint of endpoints) {
      const spinner = ora(`Checking ${endpoint.name}...`).start();
      try {
        execSync(`curl -s -o /dev/null -w "%{http_code}" ${endpoint.url}`, { encoding: 'utf8' });
        spinner.succeed(`${endpoint.name} - ${chalk.green('UP')}`);
      } catch (error) {
        spinner.fail(`${endpoint.name} - ${chalk.red('DOWN')}`);
      }
    }
    
    console.log(chalk.green('\n‚úÖ Health check complete\n'));
  });

// Build command - check and generate status page
program
  .command('build')
  .description('Check endpoints and generate status page')
  .action(() => {
    console.log(chalk.bold('\nüè• GoHalalLife Health Check & Build\n'));
    
    checkDirectory();
    
    console.log(chalk.yellow('Note: Full Upptime integration requires native dependencies.'));
    console.log(chalk.yellow('Status page generation will be handled by GitHub Actions.\n'));
    
    console.log(chalk.green('‚úÖ Configuration files are ready for GitHub Actions deployment.\n'));
  });

// Graphs command
program
  .command('graphs')
  .description('Generate response time graphs')
  .action(() => {
    console.log(chalk.bold('\nüìä Generating Graphs\n'));
    
    checkDirectory();
    
    console.log(chalk.yellow('Graphs will be generated by GitHub Actions workflows.\n'));
  });

// Update command - full update with commits
program
  .command('update')
  .description('Run full update cycle with git commits')
  .action(() => {
    console.log(chalk.bold('\nüîÑ Running Full Update\n'));
    
    checkDirectory();
    
    console.log(chalk.yellow('Full updates will be performed by GitHub Actions.\n'));
  });

// Production check command - use production config
program
  .command('prod')
  .description('Check production endpoints only')
  .action(() => {
    console.log(chalk.bold('\nüè• GoHalalLife Production Health Check\n'));
    
    checkDirectory();
    
    // Check production endpoints
    const prodEndpoints = [
      { name: 'GoHalalLife Main Site', url: 'https://gohalallife.com' },
      { name: 'Status Worker', url: 'https://gohalallife-status-production.innovativesolutions109-089.workers.dev/status' },
      { name: 'Database Health', url: 'https://gohalallife-status-production.innovativesolutions109-089.workers.dev/health/db', needsAuth: true },
      { name: 'FTS Health', url: 'https://gohalallife-status-production.innovativesolutions109-089.workers.dev/health/fts', needsAuth: true }
    ];
    
    for (const endpoint of prodEndpoints) {
      const spinner = ora(`Checking ${endpoint.name}...`).start();
      try {
        let curlCmd = `curl -s -o /dev/null -w "%{http_code}" ${endpoint.url}`;
        if (endpoint.needsAuth) {
          curlCmd = `curl -s -o /dev/null -w "%{http_code}" -H "X-API-Key: your-secure-health-check-api-key-2025" ${endpoint.url}`;
        }
        const statusCode = execSync(curlCmd, { encoding: 'utf8' }).trim();
        const status = statusCode === '200' ? chalk.green('UP') : chalk.yellow(`UP (${statusCode})`);
        spinner.succeed(`${endpoint.name} - ${status}`);
      } catch (error) {
        spinner.fail(`${endpoint.name} - ${chalk.red('DOWN')}`);
      }
    }
    
    console.log(chalk.green('\n‚úÖ Production health check complete\n'));
  });

program.parse();